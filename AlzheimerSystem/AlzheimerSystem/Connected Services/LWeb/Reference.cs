//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlzheimerSystem.LWeb {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LWeb.ADwebSoap")]
    public interface ADwebSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IdentifyForGPS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IdentifyForGPS(string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IdentifyForGPS", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IdentifyForGPSAsync(string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSpecificIndoor1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetSpecificIndoor1(string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSpecificIndoor1", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSpecificIndoor1Async(string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PosiData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet PosiData(string Date, string acc, string place);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PosiData", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> PosiDataAsync(string Date, string acc, string place);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SelectLoacation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SelectLoacation(string date, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SelectLoacation", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SelectLoacationAsync(string date, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SelectIndoor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet SelectIndoor(string Date, string timeRange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SelectIndoor", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectIndoorAsync(string Date, string timeRange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/savedate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string savedate(string date_time, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/savedate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> savedateAsync(string date_time, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIndoorCurrentDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetIndoorCurrentDate(string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIndoorCurrentDate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetIndoorCurrentDateAsync(string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveObjectPosition", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SaveObjectPosition(string cookie, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveObjectPosition", ReplyAction="*")]
        System.Threading.Tasks.Task SaveObjectPositionAsync(string cookie, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertLocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int InsertLocation(string DateTime, double Longtitude, double Latitude, string Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InsertLocation", ReplyAction="*")]
        System.Threading.Tasks.Task<int> InsertLocationAsync(string DateTime, double Longtitude, double Latitude, string Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSpecificAboveIndoor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetSpecificAboveIndoor(string Date, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSpecificAboveIndoor", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSpecificAboveIndoorAsync(string Date, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSelectAboveIndoor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetSelectAboveIndoor(string Date, string timeRange, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSelectAboveIndoor", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSelectAboveIndoorAsync(string Date, string timeRange, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOutdoor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetOutdoor(string Acc, string Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOutdoor", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetOutdoorAsync(string Acc, string Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIndoor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetIndoor(string Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIndoor", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetIndoorAsync(string Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIndoor1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetIndoor1(string Date, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIndoor1", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetIndoor1Async(string Date, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIndoorCurrent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetIndoorCurrent(string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIndoorCurrent", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetIndoorCurrentAsync(string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIndoorAbove", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetIndoorAbove(string Date, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIndoorAbove", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetIndoorAboveAsync(string Date, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSelectIndoor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetSelectIndoor(string Date, string timeRange, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSelectIndoor", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSelectIndoorAsync(string Date, string timeRange, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSpecificIndoor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetSpecificIndoor(string Date, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSpecificIndoor", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetSpecificIndoorAsync(string Date, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PictInsert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void PictInsert(string img_url, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PictInsert", ReplyAction="*")]
        System.Threading.Tasks.Task PictInsertAsync(string img_url, string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PictSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PictSelect(string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PictSelect", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PictSelectAsync(string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChangeArrayElements", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] ChangeArrayElements();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChangeArrayElements", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ChangeArrayElementsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateINFO", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int updateINFO(string phone, string address, string 帳號);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateINFO", ReplyAction="*")]
        System.Threading.Tasks.Task<int> updateINFOAsync(string phone, string address, string 帳號);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/showAddressandCell", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet showAddressandCell(string acc, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/showAddressandCell", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> showAddressandCellAsync(string acc, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/isPassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string isPassword(string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/isPassword", ReplyAction="*")]
        System.Threading.Tasks.Task<string> isPasswordAsync(string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Update新密碼", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int Update新密碼(string 密碼, string 帳號);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Update新密碼", ReplyAction="*")]
        System.Threading.Tasks.Task<int> Update新密碼Async(string 密碼, string 帳號);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CallLineToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CallLineToken(string 帳號);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CallLineToken", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CallLineTokenAsync(string 帳號);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Login(string acc, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Login", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> LoginAsync(string acc, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AccountExist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AccountExist(string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AccountExist", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AccountExistAsync(string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/帳號是否存在", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool 帳號是否存在(string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/帳號是否存在", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> 帳號是否存在Async(string acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Sign", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int Sign(string 帳號, string 密碼, string 姓名, string 身分別, string 身分證字號, string 性別, string 生日, string 地址, string 電話);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Sign", ReplyAction="*")]
        System.Threading.Tasks.Task<int> SignAsync(string 帳號, string 密碼, string 姓名, string 身分別, string 身分證字號, string 性別, string 生日, string 地址, string 電話);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ADwebSoapChannel : AlzheimerSystem.LWeb.ADwebSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ADwebSoapClient : System.ServiceModel.ClientBase<AlzheimerSystem.LWeb.ADwebSoap>, AlzheimerSystem.LWeb.ADwebSoap {
        
        public ADwebSoapClient() {
        }
        
        public ADwebSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ADwebSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ADwebSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ADwebSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IdentifyForGPS(string acc) {
            return base.Channel.IdentifyForGPS(acc);
        }
        
        public System.Threading.Tasks.Task<bool> IdentifyForGPSAsync(string acc) {
            return base.Channel.IdentifyForGPSAsync(acc);
        }
        
        public System.Data.DataSet GetSpecificIndoor1(string acc) {
            return base.Channel.GetSpecificIndoor1(acc);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSpecificIndoor1Async(string acc) {
            return base.Channel.GetSpecificIndoor1Async(acc);
        }
        
        public System.Data.DataSet PosiData(string Date, string acc, string place) {
            return base.Channel.PosiData(Date, acc, place);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> PosiDataAsync(string Date, string acc, string place) {
            return base.Channel.PosiDataAsync(Date, acc, place);
        }
        
        public string SelectLoacation(string date, string acc) {
            return base.Channel.SelectLoacation(date, acc);
        }
        
        public System.Threading.Tasks.Task<string> SelectLoacationAsync(string date, string acc) {
            return base.Channel.SelectLoacationAsync(date, acc);
        }
        
        public System.Data.DataSet SelectIndoor(string Date, string timeRange) {
            return base.Channel.SelectIndoor(Date, timeRange);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectIndoorAsync(string Date, string timeRange) {
            return base.Channel.SelectIndoorAsync(Date, timeRange);
        }
        
        public string savedate(string date_time, string acc) {
            return base.Channel.savedate(date_time, acc);
        }
        
        public System.Threading.Tasks.Task<string> savedateAsync(string date_time, string acc) {
            return base.Channel.savedateAsync(date_time, acc);
        }
        
        public string GetIndoorCurrentDate(string acc) {
            return base.Channel.GetIndoorCurrentDate(acc);
        }
        
        public System.Threading.Tasks.Task<string> GetIndoorCurrentDateAsync(string acc) {
            return base.Channel.GetIndoorCurrentDateAsync(acc);
        }
        
        public void SaveObjectPosition(string cookie, string acc) {
            base.Channel.SaveObjectPosition(cookie, acc);
        }
        
        public System.Threading.Tasks.Task SaveObjectPositionAsync(string cookie, string acc) {
            return base.Channel.SaveObjectPositionAsync(cookie, acc);
        }
        
        public int InsertLocation(string DateTime, double Longtitude, double Latitude, string Account) {
            return base.Channel.InsertLocation(DateTime, Longtitude, Latitude, Account);
        }
        
        public System.Threading.Tasks.Task<int> InsertLocationAsync(string DateTime, double Longtitude, double Latitude, string Account) {
            return base.Channel.InsertLocationAsync(DateTime, Longtitude, Latitude, Account);
        }
        
        public System.Data.DataSet GetSpecificAboveIndoor(string Date, string acc) {
            return base.Channel.GetSpecificAboveIndoor(Date, acc);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSpecificAboveIndoorAsync(string Date, string acc) {
            return base.Channel.GetSpecificAboveIndoorAsync(Date, acc);
        }
        
        public System.Data.DataSet GetSelectAboveIndoor(string Date, string timeRange, string acc) {
            return base.Channel.GetSelectAboveIndoor(Date, timeRange, acc);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSelectAboveIndoorAsync(string Date, string timeRange, string acc) {
            return base.Channel.GetSelectAboveIndoorAsync(Date, timeRange, acc);
        }
        
        public System.Data.DataSet GetOutdoor(string Acc, string Date) {
            return base.Channel.GetOutdoor(Acc, Date);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetOutdoorAsync(string Acc, string Date) {
            return base.Channel.GetOutdoorAsync(Acc, Date);
        }
        
        public System.Data.DataSet GetIndoor(string Date) {
            return base.Channel.GetIndoor(Date);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetIndoorAsync(string Date) {
            return base.Channel.GetIndoorAsync(Date);
        }
        
        public System.Data.DataSet GetIndoor1(string Date, string acc) {
            return base.Channel.GetIndoor1(Date, acc);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetIndoor1Async(string Date, string acc) {
            return base.Channel.GetIndoor1Async(Date, acc);
        }
        
        public System.Data.DataSet GetIndoorCurrent(string acc) {
            return base.Channel.GetIndoorCurrent(acc);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetIndoorCurrentAsync(string acc) {
            return base.Channel.GetIndoorCurrentAsync(acc);
        }
        
        public System.Data.DataSet GetIndoorAbove(string Date, string acc) {
            return base.Channel.GetIndoorAbove(Date, acc);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetIndoorAboveAsync(string Date, string acc) {
            return base.Channel.GetIndoorAboveAsync(Date, acc);
        }
        
        public System.Data.DataSet GetSelectIndoor(string Date, string timeRange, string acc) {
            return base.Channel.GetSelectIndoor(Date, timeRange, acc);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSelectIndoorAsync(string Date, string timeRange, string acc) {
            return base.Channel.GetSelectIndoorAsync(Date, timeRange, acc);
        }
        
        public System.Data.DataSet GetSpecificIndoor(string Date, string acc) {
            return base.Channel.GetSpecificIndoor(Date, acc);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetSpecificIndoorAsync(string Date, string acc) {
            return base.Channel.GetSpecificIndoorAsync(Date, acc);
        }
        
        public void PictInsert(string img_url, string acc) {
            base.Channel.PictInsert(img_url, acc);
        }
        
        public System.Threading.Tasks.Task PictInsertAsync(string img_url, string acc) {
            return base.Channel.PictInsertAsync(img_url, acc);
        }
        
        public string PictSelect(string acc) {
            return base.Channel.PictSelect(acc);
        }
        
        public System.Threading.Tasks.Task<string> PictSelectAsync(string acc) {
            return base.Channel.PictSelectAsync(acc);
        }
        
        public string[] ChangeArrayElements() {
            return base.Channel.ChangeArrayElements();
        }
        
        public System.Threading.Tasks.Task<string[]> ChangeArrayElementsAsync() {
            return base.Channel.ChangeArrayElementsAsync();
        }
        
        public int updateINFO(string phone, string address, string 帳號) {
            return base.Channel.updateINFO(phone, address, 帳號);
        }
        
        public System.Threading.Tasks.Task<int> updateINFOAsync(string phone, string address, string 帳號) {
            return base.Channel.updateINFOAsync(phone, address, 帳號);
        }
        
        public System.Data.DataSet showAddressandCell(string acc, string pwd) {
            return base.Channel.showAddressandCell(acc, pwd);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> showAddressandCellAsync(string acc, string pwd) {
            return base.Channel.showAddressandCellAsync(acc, pwd);
        }
        
        public string isPassword(string acc) {
            return base.Channel.isPassword(acc);
        }
        
        public System.Threading.Tasks.Task<string> isPasswordAsync(string acc) {
            return base.Channel.isPasswordAsync(acc);
        }
        
        public int Update新密碼(string 密碼, string 帳號) {
            return base.Channel.Update新密碼(密碼, 帳號);
        }
        
        public System.Threading.Tasks.Task<int> Update新密碼Async(string 密碼, string 帳號) {
            return base.Channel.Update新密碼Async(密碼, 帳號);
        }
        
        public string CallLineToken(string 帳號) {
            return base.Channel.CallLineToken(帳號);
        }
        
        public System.Threading.Tasks.Task<string> CallLineTokenAsync(string 帳號) {
            return base.Channel.CallLineTokenAsync(帳號);
        }
        
        public bool Login(string acc, string pwd) {
            return base.Channel.Login(acc, pwd);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string acc, string pwd) {
            return base.Channel.LoginAsync(acc, pwd);
        }
        
        public bool AccountExist(string acc) {
            return base.Channel.AccountExist(acc);
        }
        
        public System.Threading.Tasks.Task<bool> AccountExistAsync(string acc) {
            return base.Channel.AccountExistAsync(acc);
        }
        
        public bool 帳號是否存在(string acc) {
            return base.Channel.帳號是否存在(acc);
        }
        
        public System.Threading.Tasks.Task<bool> 帳號是否存在Async(string acc) {
            return base.Channel.帳號是否存在Async(acc);
        }
        
        public int Sign(string 帳號, string 密碼, string 姓名, string 身分別, string 身分證字號, string 性別, string 生日, string 地址, string 電話) {
            return base.Channel.Sign(帳號, 密碼, 姓名, 身分別, 身分證字號, 性別, 生日, 地址, 電話);
        }
        
        public System.Threading.Tasks.Task<int> SignAsync(string 帳號, string 密碼, string 姓名, string 身分別, string 身分證字號, string 性別, string 生日, string 地址, string 電話) {
            return base.Channel.SignAsync(帳號, 密碼, 姓名, 身分別, 身分證字號, 性別, 生日, 地址, 電話);
        }
    }
}
